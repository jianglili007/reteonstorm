#!/bin/bash

# $1 = log file to summarise
# $2 = if this is equal to -o then summary should include <result> tags and $3 is necessary
#      if equal to -k then the user will be informed if "Results_OK" is not found
#      if -c then $3 ExpectedResultSize (in the log file) will be compared to all CounterTerminal counts (in the log file)
#           results will be accepted iff $3 correct counts are found
# ($3) = expected lines between <result> and </result> (non-inclusive)
#        or expected correct CounterTerminal counts

###################

first_emit_msec=`cat $1 | grep -F -m 1 \"startup\" | awk '{print $1}'`
last_ack_msec=`cat $1 | awk '/Acking/{print $1}' | tail -1`
if [ -n first_emit_msec ] && [ -n last_ack_msec ]; then
	diff_msec=`expr $last_ack_msec - $first_emit_msec`
	diff_sec=`echo "scale=3;${diff_msec}/1000" | bc`
	echo "lastack-firstemit=${diff_sec}"
else
	echo "first_emit=$first_emit_msec"
	echo "last_ack=$last_ack_msec"
fi

###################

#"FAIL" printed by FileReader Spout only
#if grep -Fq "FAIL" < $1 ; then
#	echo "FAILURES exist"
#fi

###################

grep -F "Exception" < $1

###################

if [ "$2" == "-o" ] ; then 
	grep -A `expr $3 + 1` \<result < $1
elif [ "$2" == "-k" ] ; then
	grep -F "Results_OK" $1
elif [ "$2" == "-c" ] ; then
	expected_value=`cat $1 | grep -F "ExpectedResultSize" | cut -d'=' -f2`
	correct_results=`cat $1 | grep -e '^CounterTerminal[0-9]*: partialCount' | sort | ${ROS_SCRIPTS}/addup_partial.pl | grep -F "count=$expected_value" | wc -l`
	if [ $correct_results == "$3" ]; then  #notice $correct_results doesn't have double quotes around it
		echo "results OK"
	else
		echo "results are NOT ok!"
	fi
else
	cat $1 | grep -e '^CounterTerminal[0-9]*: partialCount' | sort | ${ROS_SCRIPTS}/addup_partial.pl
fi

###################
